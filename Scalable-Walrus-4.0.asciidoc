Eucalyptus 4.0 adds an object storage system that provides a S3 API interface and is designed to scale out horizontally. Eucalyptus admins can configure multiple Object Storage Gateway (OSG) components that act as front end service components that implement the S3 API. The OSG has the following properties:

* Multiple active OSGs can be configured to enable active/active data paths for load balancing and availability
* OSGs provide an append only S3 API compatible storage system.
* OSGs perform request authentication and enforce ACLs and IAM rules on buckets and objects.
* OSGs translate user requests to requests to the underlying storage subsystem. The backend system is not intended to be used directly by the end user.
* The underlying system does not have any knowledge of object consistency or versioning.

The backend for the object storage system is designed to be pluggable. In 4.0, we provide a single server Walrus backend that uses a filesystem to store objects, as well as a scalable backend that uses RiakCS as the object store.

The cloud administrator can register multiple, active OSGs, which are designed to act as redundant active/active nodes. The client may direct requests to any active OSG. OSGs handle authentication and enforce IAM (Identity and Access Management) settings.

### Installing Object Storage Gateways (OSGs) ###

Please install the "eucalyptus-osg" package on each host designated as the OSG.

    yum install eucalyptus-osg

In this setup, you will only have to install the "eucalyptus-cloud" package on the CLC and the "eucalyptus-osg" package on each OSG host.

### Registering Object Storage Gateways (OSGs)

The cloud administrator can register multiple Object Storage Gateway (OSG) components with the Eucalyptus Cloud Controller (CLC). 

To do so, you may use the euca_conf utility or the euca-regiser-object-storage-gateway command. For instance,

    euca_conf --register-osg <OSG IP>

You should do this for every OSG you wish to register (substituting the IP with the correct one, of course).

OSGs may be deregistered similarly, but remember to use the OSG's component name and NOT its IP address. 

    euca_conf --deregister-osg <OSG component name>

You can list the component name for your OSG by running euca-describe-services. For example,

    SERVICE	objectstorage  	objectstorage  	osg-192.168.1.16	NOTREADY  	23  	http://192.168.1.16:8773/services/objectstorage	arn:euca:bootstrap:objectstorage:objectstorage:osg-192.168.1.16/

To deregister this OSG, you would run the following command,

    euca_conf --deregister-osg osg-192.168.1.16

### Configuring the Storage Provider

We currently support RiakCS and Walrus as the backend storage providers.

#### Configuring OSG to use RiakCS ####

In this configuration, on the backend, each OSG connects to a RiakCS cluster. A typical RiakCS installation consists of a number of storage nodes (at least 5 for production use) that run Riak/RiakCS components. We expect that Riak/RiakCS is installed and functioning before attempting OSG configuration.

We do NOT recommend accessing the RiakCS nodes directly. Doing so might lead to an inconsistent state and you may not be able to access your data through Eucalyptus.

After you register an OSG, you cannot use it until it is correctly configured. After registration, OSG state will be initially listed as BROKEN. For example,

    SERVICE	objectstorage  	objectstorage  	osg-192.168.1.16	BROKEN    	23  	http://192.168.1.16:8773/services/objectstorage	arn:euca:bootstrap:objectstorage:objectstorage:osg-192.168.1.16/

To configure the OSG, please specify a storage provider using the euca-modify-property command. To use RiakCS as the backend, you will need to pick "s3" as the storage provider,

    euca-modify-property -p objectstorage.providerclient=s3

You will now have to specify the RiakCS/S3 endpoint that you wish to use with Eucalyptus (you may configure a round robin DNS and specify a host name instead of an individual node IP). For example,

    euca-modify-property -p objectstorage.s3provider.s3endpoint=riakcs-01.riakcs-cluster.myorg.com

In addition, you will have to provide Eucalyptus with credentials to access your RiakCS installation.

    euca-modify-property -p objectstorage.s3provider.s3accesskey=<access key>

    euca-modify-property -p objectstorage.s3provider.s3secretkey=<secret key>

Please note that these are access and secret keys for the RiakCS cluster and NOT Eucalyptus. You may use the RiakCS front end web interface to create users.

Make sure that the user with these credentials has administrative access to RiakCS.

#### Configuring OSG to use Walrus ####

For single server installations and for use cases where users wish to deploy an object service on top of a filesystem, we support running the OSG with a Walrus backend.

The administrator needs to register Walrus and make sure that it is functioning.

    euca_conf --register-walrus <Walrus host or IP>

Please check the status of Eucalyptus services, by running

    euca-describe-services

The "walrus" component must appear ENABLED.

After this is done, the administrator will need to register a OSG, which can be a separate node, or in most scenarios, co-located with Walrus. 

    euca_conf --register-osg <OSG IP>

Please make sure that the OSG is successfully registered. At this point, the OSG needs to be configured to use Walrus as the backend, as follows.

    euca-modify-property -p objectstorage.providerclient=walrus

Please monitor the status of services by running

    euca-describe-services

Walrus as well as the OSG should appear ENABLED.


### Additional Configuration (optional)

The following properties are for tuning the behavior of the Object Storage service and Gateways, the defaults are reasonable and changing is not necessary, but they are available for unexpected situations.

* objectstorage.cleanuptaskintervalseconds : The interval, in seconds, at which background cleanup tasks are run. Default is 60 seconds. The background cleanup tasks purge the backend of overwritten objects and clean up object history.

* objectstorage.failedputtimeouthours : The time, in hours, after which to consider an un-committed object upload to be failed. The default is 24 hours. This allows cleansing of metadata for objects that were pending upload when an OSG fails or is stopped in the middle of a user operation. This should be kept at least as long as the longest reasonable time to upload a single large object, in order to prevent unintentional cleanup of actually progressing uploads. The S3 maximum single upload size is 5GB.

* objectstorage.queue_size : The size in, chunks, of the internal buffers that queue data for transfer to the backend on a per-request basis. A larger value will allow more buffering in the OSG when the client is uploading quickly but the backend bandwidth is lower and cannot consume data fast enough. Too large a value may result in OOM if the JVM does not have sufficient heap space to handle the concurrent requests * queue_size. The default is 100.

* objectstorage.s3provider.s3usehttps : Whether or not to use https for the connections to the backend provider. If you configure this, be sure you can use the backend properly with HTTPS (certs, etc.) or the OSG will fail to connect. For RiakCS, you must configure certificates and identities to support HTTPS, it is not enabled in a default RiakCS installation. Default value is false.

### Checking Service State

You may use euca-describe-services to check service status. After successful configuration, the state of the OSG will be reported as ENABLED.

    SERVICE	objectstorage  	objectstorage  	osg-192.168.1.16	ENABLED    	23  	http://192.168.1.16:8773/services/objectstorage	arn:euca:bootstrap:objectstorage:objectstorage:osg-192.168.1.16/

If the state appears as DISABLED or BROKEN, please check cloud-*.log files in /var/log/eucalyptus. "DISABLED" generally indicates that there is a problem with your network or credentials.

### Accessing Object Storage

You can now use your favorite S3 client (e.g. s3curl) to interact with Eucalyptus. Simply replace your S3_URL with the address of the OSG you wish to interact with and the service path with "/services/objectstorage" instead of "/services/Walrus". For example,

    S3_URL = http://<OSG IP>:8773/services/objectstorage

Or you may set your s3 endpoint manually.

If you have DNS enabled, you may use the "objectstorage" prefix to access object storage. Eucalyptus will return a list of IPs that correspond to ENABLED OSGs.

**NOTE: A current known issue is that the objectstorage URL is not included in the eucarc downloaded with euca_conf --get-credentials. Simply construct it as above and you may place it in the eucarc if you wish. This will be resolved in the official release.** 

### Configuring Load Balancers

We recommend that you use a load balancer to balance traffic across all RiakCS nodes. Below is an example of how to use [Nginx](http://wiki.nginx.org/Main) to get you started. You may use [HAProxy](http://haproxy.1wt.eu/) if you wish. If you use Nginx, please install the latest (1.4.6+) as some older versions (such as the one included in CentOS 6.x) have bugs in POST request handling as well as don't allow passing HTTP 1.1 to the backend, which is required for RiakCS.

You will have to install Nginx on one of your servers and tell direct HTTP traffic to your RiakCS nodes. By default, RiakCS listens to web traffic on port 8080. In this example, riakcs-00.yourdomain.com, riakcs-01.yourdomain.com and riakcs-02.yourdomain.com are three RiakCS nodes that you have previously configured.

On many Linux installations, Nginx uses /etc/nginx/conf.d for server configuration. You can either edit the default configuration or create a new config file. Here is a sample configuration,

    upstream riak_cs_host {
      server riakcs-00.yourdomain.com:8080;
      server riakcs-01.yourdomain.com:8080;
      server riakcs-02.yourdomain.com:8080;
      }

    server {
      listen   80;
      server_name  _;
      access_log  /var/log/nginx/riak_cs.access.log;
      client_max_body_size 5G; #5GB is max S3 single upload size, so use that value, or 0 to disable checks.

    location / {
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_redirect off;
      proxy_http_version 1.1;
      proxy_connect_timeout      90;
      proxy_send_timeout         90;
      proxy_read_timeout         90;
      proxy_buffer_size    128k;
      proxy_buffers     4 256k;
      proxy_busy_buffers_size 256k;
      proxy_temp_file_write_size 256k;

      proxy_pass http://riak_cs_host;
      }
    }

You can then restart nginx or merely reload rules (/etc/init.d/nginx reload). You can then access port 80 on your Nginx host, which will forward requests to your RiakCS cluster.

*****
[[category.storage]]