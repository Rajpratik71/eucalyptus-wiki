#!/usr/bin/perl

# This is the wiki WIZARD! for Eucalyptus.  It walks through the wiki 
# periodically and does stuff.  Warning: this will almost certainly not 
# be "good code".  If you want that, find a developer.  Also: needless
# to say, patches welcome.  (And yes, it's written in perl, I know.
# It's the only language my hands remember without references handy.)

$git_repo_path = ".";
# chdir($git_repo_path) or die "$!";

# We assume a git pull is run here to start things off.

# OK, now we want to grep through all the files in this directory for
# various reasons.  First up: find all unique values of "category"
# and make "category" pages for each of them.

# Grab all filenames that end in .md, .org, and .textile.  And, at
# some point, whatever other markup types are added.
opendir (DIR, $git_repo_path) or die "$!"; my @wikidocs = grep {/.*?\.md/} readdir DIR; close DIR;
opendir (DIR, $git_repo_path) or die "$!"; push (@wikidocs, (grep {/.*?\.org/} readdir DIR)); close DIR;
opendir (DIR, $git_repo_path) or die "$!"; push (@wikidocs, (grep {/.*?\.textile/} readdir DIR)); close DIR;

# Create an empty categories hash.
my %categories = ();

# Walk through all the files, looking for category tags.
foreach my $wikidoc (@wikidocs) {
    # Note: ignore the category files themselves.
    if ($wikidoc =~ /^category\./) {
        print "Excluding category file $wikidoc\n";
    }
    else {
        my $category_found = '';  # we haven't seen a category on this page yet.
        print "$wikidoc\n";
        my $wikilink = $wikidoc;
        $wikilink =~ s/\..*//;
        open(FH,"$git_repo_path/$wikidoc") or die "$!";
        while (<FH>){ 
            if (/\[\[category\.(\s*)(.*)\]\]/) {
                # OK, now you know you've got category and page link.
                # Put them together.  
                $category_found = 'YES, I HAVE FOUND A CATEGORY';
                $categories{$2} .= "* [[$wikilink]]\n";
            }
        }
        if (!$category_found) { 
            $categories{"UNCATEGORIZED"} .= "* [[$wikilink]]\n";
        }
        close(FH);
    }
}

# Now:
# 1. create a markdown page for every category hash thus created
# 2. add each new category page to the category index
my $category_index_text = "Index of Categories\n\n";
for my $key ( sort keys %categories ) {
    my $value = $categories{$key};
    my $category_page = "$git_repo_path/category.$key.md";
    print "Writing to category page: $category_page\n";
    open(FH,">$category_page") or die;
    # print "$key => $value\n";
    # Split and sort this string by \n.  Warning: nasty.
    print FH join("\n",sort(split(/\n/,$value))) ."\n\n";
    #print FH "$value\n\n";
    print FH "*****\n";
    print FH "NOTE: this file is automatically generated. Any edits will be overwritten.\n";
    close(FH);
    # Add the category to the index text.
    $category_index_text .= "* [[category.$key]]\n"
}

# Now write to the index.
my $category_index_file = "$git_repo_path/index-of-categories.md";
open (FH,">$category_index_file") or die $!;
print FH $category_index_text;
close FH;

